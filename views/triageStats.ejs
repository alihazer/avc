<div class="card">
    <div class="card-header">
        <h1>Statistics</h1>
    </div>
    <div class="card-body">
        <div class="select">
            <label for="yearSelect">Select Year:</label>
            <select id="yearSelect">
                <% for (let year = 2024; year <= new Date().getFullYear(); year++) { %>
                    <option value="<%= year %>"><%= year %></option>
                <% } %>
            </select>
        </div>

        <div class="total">
            <h2>Total Cases: <span id="totalCases"></span></h2>
        </div>
        <h1>Triage Statistics</h1>
        <div id="chart"></div>

        <h1>Borrowing Statistics</h1>
        <h2>Total cases: <span id="borrowTotal"></span></h2>
        <div id="borrowChart">
            
        </div>
    </div>

    <h1>Most Active Paramedics by Month</h1>
<div id="paramedicStats">
    <table>
        <thead>
            <tr>
                <th>Month</th>
                <th>Paramedic</th>
                <th>Cases</th>
            </tr>
        </thead>
        <tbody id="paramedicStatsBody">
            <!-- Dynamic content will be inserted here -->
        </tbody>
    </table>
</div>
<h1>Most Active Drivers by Month</h1>
<div id="driverStats">
    <table>
        <thead>
            <tr>
                <th>Month</th>
                <th>Driver</th>
                <th>Cases</th>
            </tr>
        </thead>
        <tbody id="driverStatsBody">
            <!-- Dynamic content will be inserted here -->
        </tbody>
    </table>
</div>

</div>

<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<script>
    let triageChart = null;
    let borrowChart = null;

    async function fetchTriageStats(year) {
    const response = await fetch(`/triage/stats/${year}`);
    if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.json();
}

    async function fetchBorrowStats(year) {
        const response = await fetch(`/borrowed-items/stats/${year}`);
        return response.json();
    }

    function formatTriageData(data) {
    const categories = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

    return data.map(item => {
        const seriesData = new Array(12).fill(0);
        if (item.data) {
            item.data.forEach(d => {
                if (d && d.month && d.count != null) {
                    seriesData[d.month - 1] = d.count;
                }
            });
        }
        return {
            name: item.case_type || 'Unknown',
            data: seriesData
        };
    });
}


    function formatBorrowData(data) {
        const categories = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

        return data.map(item => {
            const seriesData = new Array(12).fill(0);
            item.data.forEach(d => {
                seriesData[d.month - 1] = d.count;
            });

            return {
                name: item.category,
                data: seriesData
            };
        });
    }

    function renderTriageChart(data) {
        const options = {
            series: formatTriageData(data),
            chart: {
                height: 350,
                type: 'area'
            },
            dataLabels: {
                enabled: false
            },
            stroke: {
                curve: 'smooth'
            },
            xaxis: {
                categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
            },
            tooltip: {
                x: {
                    format: 'MMM'
                }
            },
            legend: {
                position: 'bottom', // Ensures legend is at the bottom
                horizontalAlign: 'center', // Center aligns the legend items
                floating: false, // Keeps the legend in place
                offsetY: 0 // Adjusts vertical position of the legend
            }
        };

        if (triageChart) {
            triageChart.destroy();  // Destroy the existing chart instance
        }

        triageChart = new ApexCharts(document.querySelector("#chart"), options);
        triageChart.render();
    }

    function renderBorrowChart(data) {
        const options = {
            series: formatBorrowData(data),
            chart: {
                height: 350,
                type: 'area'
            },
            dataLabels: {
                enabled: false
            },
            stroke: {
                curve: 'smooth'
            },
            xaxis: {
                categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
            },
            tooltip: {
                x: {
                    format: 'MMM'
                }
            },
            legend: {
                position: 'bottom', // Ensures legend is at the bottom
                horizontalAlign: 'center', // Center aligns the legend items
                floating: false, // Keeps the legend in place
                offsetY: 0 // Adjusts vertical position of the legend
            }
        };

        if (borrowChart) {
            borrowChart.destroy();  // Destroy the existing chart instance
        }

        borrowChart = new ApexCharts(document.querySelector("#borrowChart"), options);
        borrowChart.render();
    }


    document.getElementById('yearSelect').addEventListener('change', async function () {
    const year = this.value;

    try {
        const [triageResponse, borrowResponse] = await Promise.all([
            fetchTriageStats(year),
            fetchBorrowStats(year),
        ]);

        const data = triageResponse.data;
        const borrowData = borrowResponse.borrowData;
        const casesSpan = document.getElementById('totalCases');
        const totalSpan = document.getElementById('borrowTotal');

        totalSpan.textContent = borrowResponse.totalCases;
        casesSpan.textContent = triageResponse.totalCases;

        renderTriageChart(data);
        renderBorrowChart(borrowData);

        // Render the paramedic stats
        await renderMostParamedic(year);
    } catch (error) {
        console.error('Error fetching stats:', error);
    }
});


    // Load the current year's data on page load
    (async function () {
    const currentYear = new Date().getFullYear();
    document.getElementById('yearSelect').value = currentYear;

    try {
        const [triageResponse, borrowResponse] = await Promise.all([
            fetchTriageStats(currentYear),
            fetchBorrowStats(currentYear),
        ]);

        const data = triageResponse.data;
        const borrowData = borrowResponse.borrowData;
        const casesSpan = document.getElementById('totalCases');
        const totalSpan = document.getElementById('borrowTotal');

        totalSpan.textContent = borrowResponse.totalCases;
        casesSpan.textContent = triageResponse.totalCases;

        renderTriageChart(data);
        renderBorrowChart(borrowData);

        // Render the paramedic stats
        await renderMostParamedic(currentYear);
        await renderMostDriver(currentYear);
    } catch (error) {
        console.error('Error fetching stats:', error);
    }
})();

async function fetchMostParamedic(year) {
  try {
    const response = await fetch(`/most-paramedic/${year}`);
    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Fetch failed:', error);
    return null;
  }
}

async function renderMostParamedic(year) {
  try {
    const tbody = document.getElementById('paramedicStatsBody');
    if (!tbody) throw new Error('Table element not found');

    tbody.innerHTML = '<tr><td colspan="3">Loading...</td></tr>';

    const data = await fetchMostParamedic(year);
    console.log('Data:', data);
    
    if (!data || data.length === 0) {
      tbody.innerHTML = '<tr><td colspan="3">No data available</td></tr>';
      return;
    }

    tbody.innerHTML = ''; // Clear loading state
    data.results.forEach((item) => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td>${item.month}</td>
        <td>${item.paramedic || 'Unknown'}</td>
        <td>${item.caseCount}</td>
      `;
      tbody.appendChild(row);
    });
  } catch (error) {
    console.error('Error:', error);
    const tbody = document.getElementById('paramedicStatsBody');
    if (tbody) {
      tbody.innerHTML = `
        <tr>
          <td colspan="3" class="error">Error: ${error.message}</td>
        </tr>
      `;
    }
  }
}



async function fetchMostDriver(year) {
  try {
    const response = await fetch(`/most-driver/${year}`);
    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Fetch failed:', error);
    return null;
  }
}

async function renderMostDriver(year) {
  try {
    const tbody = document.getElementById('driverStatsBody');
    if (!tbody) throw new Error('Driver table element not found');

    tbody.innerHTML = '<tr><td colspan="3">Loading...</td></tr>';

    const data = await fetchMostDriver(year);
    console.log('DataD:', data);
    
    if (!data || data.length === 0) {
      tbody.innerHTML = '<tr><td colspan="3">No data available</td></tr>';
      return;
    }

    tbody.innerHTML = '';
    data.results.forEach((item) => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td>${item.month}</td>
        <td>${item.driver || 'Unknown'}</td>
        <td>${item.caseCount}</td>
      `;
      tbody.appendChild(row);
    });
  } catch (error) {
    console.error('Error:', error);
    const tbody = document.getElementById('driverStatsBody');
    if (tbody) {
      tbody.innerHTML = `
        <tr>
          <td colspan="3" class="error">Error: ${error.message}</td>
        </tr>
      `;
    }
  }
}
</script>
